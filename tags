!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/workspace/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(NAME)	Makefile	/^$(NAME): $(OBJS)$/;"	t
$(OBJ_DIR)/%.o	Makefile	/^$(OBJ_DIR)\/%.o: $(SRC_DIR)\/%.cpp $/;"	t
**Additional Information**	.github/ISSUE_TEMPLATE/feature_request.md	/^**Additional Information**$/;"	s
**Additional Information**	.github/ISSUE_TEMPLATE/refactor-report.md	/^**Additional Information**$/;"	s
**Other additional information**	.github/ISSUE_TEMPLATE/bug_report.md	/^**Other additional information**$/;"	s
-1,4 +1,5	patch.diff	/^@@ -1,4 +1,5 @@$/;"	h	modifiedFile:a/src/Command.cpp
ALL_AUTH	include/User.hpp	/^	enum AuthFlags { NONE_AUTH, PASS_AUTH, NICK_AUTH, USER_AUTH, ALL_AUTH };$/;"	e	enum:User::AuthFlags
AuthFlags	include/User.hpp	/^	enum AuthFlags { NONE_AUTH, PASS_AUTH, NICK_AUTH, USER_AUTH, ALL_AUTH };$/;"	g	class:User
BUF_SIZE	client.cpp	/^#define BUF_SIZE /;"	d	file:
BUF_SIZE	include/Server.hpp	/^#define BUF_SIZE /;"	d
CHANNEL_HPP	include/Channel.hpp	/^#define CHANNEL_HPP$/;"	d
CNAME	Makefile	/^CNAME = client$/;"	m
COMMAND_HPP	include/Command.hpp	/^#define COMMAND_HPP$/;"	d
CSRC	Makefile	/^CSRC = client.cpp$/;"	m
CXX	Makefile	/^CXX = c++$/;"	m
Channel	include/Channel.hpp	/^class Channel {$/;"	c
Channel	src/Channel.cpp	/^Channel::Channel() : ch_name_(""), ch_pass_(""), created_user_fd_(-1) {$/;"	f	class:Channel
Channel	src/Channel.cpp	/^Channel::Channel(const std::string &ch_name)$/;"	f	class:Channel
Channel	src/Channel.cpp	/^Channel::Channel(const std::string &name, const std::string &pass)$/;"	f	class:Channel
Channel	src/Channel.cpp	/^Channel::Channel(const std::string &name, const std::string &pass,$/;"	f	class:Channel
ChannelMode	include/Channel.hpp	/^	enum ChannelMode {$/;"	g	class:Channel
Command	include/Command.hpp	/^class Command {$/;"	c
Command	src/Command.cpp	/^Command::Command(Server &server) : server_(server) {$/;"	f	class:Command
CommandFunction	include/Command.hpp	/^	typedef void (Command::*CommandFunction)(User &,$/;"	t	class:Command	typeref:typename:void (Command::*)(User &,std::vector<std::string> &)
ERROR_HPP	include/Error.hpp	/^#define ERROR_HPP$/;"	d
ERR_ALREADYREGISTRED	src/Error.cpp	/^std::string Error::ERR_ALREADYREGISTRED() const {$/;"	f	class:Error	typeref:typename:std::string
ERR_BADCHANNELKEY	src/Error.cpp	/^std::string Error::ERR_BADCHANNELKEY(const std::string &ch_name) const {$/;"	f	class:Error	typeref:typename:std::string
ERR_CHANOPRIVSNEEDED	src/Error.cpp	/^std::string Error::ERR_CHANOPRIVSNEEDED(const std::string &ch_name) const {$/;"	f	class:Error	typeref:typename:std::string
ERR_ERRONEUSNICKNAME	src/Error.cpp	/^std::string Error::ERR_ERRONEUSNICKNAME(const std::string &nick) const {$/;"	f	class:Error	typeref:typename:std::string
ERR_NEEDMOREPARAMS	src/Error.cpp	/^std::string Error::ERR_NEEDMOREPARAMS(const std::string &command) const {$/;"	f	class:Error	typeref:typename:std::string
ERR_NICKCOLLISION	src/Error.cpp	/^std::string Error::ERR_NICKCOLLISION(const std::string &nick) const {$/;"	f	class:Error	typeref:typename:std::string
ERR_NICKNAMEINUSE	src/Error.cpp	/^std::string Error::ERR_NICKNAMEINUSE(const std::string &nick) const {$/;"	f	class:Error	typeref:typename:std::string
ERR_NONICKNAMEGIVEN	src/Error.cpp	/^std::string Error::ERR_NONICKNAMEGIVEN() const { return ":No nickname given"; }$/;"	f	class:Error	typeref:typename:std::string
ERR_NOPRIVILEGES	src/Error.cpp	/^std::string Error::ERR_NOPRIVILEGES() const {$/;"	f	class:Error	typeref:typename:std::string
ERR_NOSUCHCHANNEL	src/Error.cpp	/^std::string Error::ERR_NOSUCHCHANNEL(const std::string &ch_name) const {$/;"	f	class:Error	typeref:typename:std::string
ERR_NOSUCHNICK	src/Error.cpp	/^std::string Error::ERR_NOSUCHNICK(const std::string &nick) const {$/;"	f	class:Error	typeref:typename:std::string
ERR_NOTSETPASS	src/Error.cpp	/^std::string Error::ERR_NOTSETPASS() const { return ":Pass is not yet set."; }$/;"	f	class:Error	typeref:typename:std::string
ERR_PASSWDMISMATCH	src/Error.cpp	/^std::string Error::ERR_PASSWDMISMATCH() const { return ":Password incorrect"; }$/;"	f	class:Error	typeref:typename:std::string
ERR_RESTRICTED	src/Error.cpp	/^std::string Error::ERR_RESTRICTED() const {$/;"	f	class:Error	typeref:typename:std::string
ERR_UMODEUNKNOWNFLAG	src/Error.cpp	/^std::string Error::ERR_UMODEUNKNOWNFLAG(const std::string &mode_flag) const {$/;"	f	class:Error	typeref:typename:std::string
ERR_UNKNOWNMODE	src/Error.cpp	/^std::string Error::ERR_UNKNOWNMODE(const std::string &c,$/;"	f	class:Error	typeref:typename:std::string
ERR_USERNOTINCHANNEL	src/Error.cpp	/^std::string Error::ERR_USERNOTINCHANNEL(const std::string &nick_name,$/;"	f	class:Error	typeref:typename:std::string
Error	include/Error.hpp	/^class Error {$/;"	c
FORMAT	Makefile	/^FORMAT = clang-format -i$/;"	m
I	include/Channel.hpp	/^		I = 1 << 17$/;"	e	enum:Channel::ChannelMode
INC	Makefile	/^INC = include$/;"	m
JOIN	src/Command_JOIN.cpp	/^void Command::JOIN(User &user, std::vector<std::string> &arg) {$/;"	f	class:Command	typeref:typename:void
MAX_MSG_LEN	include/Server.hpp	/^#define MAX_MSG_LEN /;"	d
MODE	src/Command_MODE.cpp	/^void Command::MODE(User &user, std::vector<std::string> &arg) {$/;"	f	class:Command	typeref:typename:void
ModeAction	include/Command.hpp	/^	enum ModeAction { setMode, unsetMode, queryMode };$/;"	g	class:Command
ModeFunction	include/Command.hpp	/^	typedef void (Command::*ModeFunction)(const ModeAction, User &,$/;"	t	class:Command	typeref:typename:void (Command::*)(const ModeAction,User &,const Channel &)
NAME	Makefile	/^NAME = ircserv$/;"	m
NICK	src/Command_NICK.cpp	/^void Command::NICK(User &user, std::vector<std::string> &arg) {$/;"	f	class:Command	typeref:typename:void
NICK_AUTH	include/User.hpp	/^	enum AuthFlags { NONE_AUTH, PASS_AUTH, NICK_AUTH, USER_AUTH, ALL_AUTH };$/;"	e	enum:User::AuthFlags
NONE_AUTH	include/User.hpp	/^	enum AuthFlags { NONE_AUTH, PASS_AUTH, NICK_AUTH, USER_AUTH, ALL_AUTH };$/;"	e	enum:User::AuthFlags
O	include/Channel.hpp	/^		O = 1 << 1,$/;"	e	enum:Channel::ChannelMode
O	include/User.hpp	/^		O = 1 << 6,$/;"	e	enum:User::UserMode
OBJS	Makefile	/^OBJS = $(SRCS:$(SRC_DIR)\/%.cpp=$(OBJ_DIR)\/%.o)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR = obj$/;"	m
PASS	Makefile	/^PASS = password$/;"	m
PASS	src/Command_PASS.cpp	/^void Command::PASS(User &user, std::vector<std::string> &arg) {$/;"	f	class:Command	typeref:typename:void
PASS_AUTH	include/User.hpp	/^	enum AuthFlags { NONE_AUTH, PASS_AUTH, NICK_AUTH, USER_AUTH, ALL_AUTH };$/;"	e	enum:User::AuthFlags
POLL_WAIT_FOREVER	include/Server.hpp	/^#define POLL_WAIT_FOREVER /;"	d
PORT	Makefile	/^PORT = 6667$/;"	m
PORT	client.cpp	/^#define PORT /;"	d	file:
PORT	include/Server.hpp	/^#define PORT /;"	d
RM	Makefile	/^RM = rm -rf$/;"	m
SERVER_HPP	include/Server.hpp	/^#define SERVER_HPP$/;"	d
SERVER_IP	client.cpp	/^#define SERVER_IP /;"	d	file:
SERVER_IP	include/Server.hpp	/^#define SERVER_IP /;"	d
SRCS	Makefile	/^SRCS = $(wildcard $(SRC_DIR)\/*.cpp)	$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = src$/;"	m
Server	include/Server.hpp	/^class Server {$/;"	c
Server	src/Server.cpp	/^Server::Server(const int argc, const char **argv) {$/;"	f	class:Server
TEST	src/Command.cpp	/^void Command::TEST(User &user, std::vector<std::string> &arg) {$/;"	f	class:Command	typeref:typename:void
USER	src/Command_USER.cpp	/^void Command::USER(User &user, std::vector<std::string> &arg) {$/;"	f	class:Command	typeref:typename:void
USER_AUTH	include/User.hpp	/^	enum AuthFlags { NONE_AUTH, PASS_AUTH, NICK_AUTH, USER_AUTH, ALL_AUTH };$/;"	e	enum:User::AuthFlags
USER_HPP	include/User.hpp	/^#define USER_HPP$/;"	d
User	include/User.hpp	/^class User {$/;"	c
User	src/User.cpp	/^User::User() : fd_(-1), auth_flag_(NONE_AUTH), nick_name_("") {}$/;"	f	class:User
User	src/User.cpp	/^User::User(const int fd)$/;"	f	class:User
UserMode	include/User.hpp	/^	enum UserMode {$/;"	g	class:User
a	include/Channel.hpp	/^		a = 1 << 4,$/;"	e	enum:Channel::ChannelMode
a	include/User.hpp	/^		a = 1 << 1,$/;"	e	enum:User::UserMode
a/src/Command.cpp	patch.diff	/^--- a\/src\/Command.cpp$/;"	m
acceptNewClientConnect	src/Server.cpp	/^void Server::acceptNewClientConnect() {$/;"	f	class:Server	typeref:typename:void
all	Makefile	/^all: $(NAME)$/;"	t
arg_	include/Command.hpp	/^	std::vector<std::string> arg_;$/;"	m	class:Command	typeref:typename:std::vector<std::string>
auth_flag_	include/User.hpp	/^	AuthFlags auth_flag_;$/;"	m	class:User	typeref:typename:AuthFlags
b	include/Channel.hpp	/^		b = 1 << 15,$/;"	e	enum:Channel::ChannelMode
cclean	Makefile	/^cclean:$/;"	t
ch_map_	include/Server.hpp	/^	std::map<std::string, Channel> ch_map_;$/;"	m	class:Server	typeref:typename:std::map<std::string,Channel>
ch_name_	include/Channel.hpp	/^	std::string ch_name_;$/;"	m	class:Channel	typeref:typename:std::string
ch_operators_	include/Channel.hpp	/^	std::vector<int> ch_operators_;$/;"	m	class:Channel	typeref:typename:std::vector<int>
ch_pass_	include/Channel.hpp	/^	std::string ch_pass_;$/;"	m	class:Channel	typeref:typename:std::string
ch_set_	include/User.hpp	/^	std::set<std::string> ch_set_;$/;"	m	class:User	typeref:typename:std::set<std::string>
ch_users_	include/Channel.hpp	/^	std::map<int, User *> ch_users_;$/;"	m	class:Channel	typeref:typename:std::map<int,User * >
checkInvalidSignsCount	src/Command_MODE.cpp	/^bool Command::checkInvalidSignsCount(const std::string &mode_str) {$/;"	f	class:Command	typeref:typename:bool
checkModeAction	src/Command_MODE.cpp	/^Command::checkModeAction(const std::string &mode_str) const {$/;"	f	class:Command	typeref:typename:Command::ModeAction
checkStringValidity	src/Command_NICK.cpp	/^bool checkStringValidity(const std::string &str) {$/;"	f	typeref:typename:bool
checkValidArg	src/Command_JOIN.cpp	/^bool Command::checkValidArg(const std::queue<std::string> &ch_queue,$/;"	f	class:Command	typeref:typename:bool
checkValidArgc	src/Server.cpp	/^void Server::checkValidArgc(const int argc) const {$/;"	f	class:Server	typeref:typename:void
checkValidChannel	src/Command_JOIN.cpp	/^bool Command::checkValidChannel(const std::string &ch_name) {$/;"	f	class:Command	typeref:typename:bool
checkValidPort	src/Server.cpp	/^void Server::checkValidPort(const char *str) const {$/;"	f	class:Server	typeref:typename:void
clean	Makefile	/^clean:$/;"	t
client	Makefile	/^client:$/;"	t
client_addr_	include/Server.hpp	/^	struct sockaddr_in client_addr_;$/;"	m	class:Server	typeref:struct:sockaddr_in
command_name_	include/Command.hpp	/^	std::string command_name_;$/;"	m	class:Command	typeref:typename:std::string
commands_map_	include/Command.hpp	/^	std::map<std::string, CommandFunction> commands_map_;$/;"	m	class:Command	typeref:typename:std::map<std::string,CommandFunction>
convertToScandinavian	src/Command_NICK.cpp	/^void convertToScandinavian(std::string &str) {$/;"	f	typeref:typename:void
createChannel	src/Command_JOIN.cpp	/^void Command::createChannel(const std::string &ch_name,$/;"	f	class:Command	typeref:typename:void
created_user_fd_	include/Channel.hpp	/^	int created_user_fd_;$/;"	m	class:Channel	typeref:typename:int
down	Makefile	/^down:$/;"	t
e	include/Channel.hpp	/^		e = 1 << 16,$/;"	e	enum:Channel::ChannelMode
error_	include/Command.hpp	/^	Error error_;$/;"	m	class:Command	typeref:typename:Error
exec	Makefile	/^exec:$/;"	t
exitAllChannels	src/Command_JOIN.cpp	/^void Command::exitAllChannels(User &user) {$/;"	f	class:Command	typeref:typename:void
exit_error	client.cpp	/^void	exit_error(const std::string& msg) {$/;"	f	typeref:typename:void
exit_error	src/Server.cpp	/^void Server::exit_error(const std::string &func, const std::string &err_msg) {$/;"	f	class:Server	typeref:typename:void
extractRealName	src/Command_USER.cpp	/^std::string Command::extractRealName(std::vector<std::string> &arg) const {$/;"	f	class:Command	typeref:typename:std::string
fclean	Makefile	/^fclean: clean cclean$/;"	t
fd_	include/User.hpp	/^	const int fd_;$/;"	m	class:User	typeref:typename:const int
format	Makefile	/^format:$/;"	t
getAuthFlags	src/User.cpp	/^User::AuthFlags User::getAuthFlags() const { return (this->auth_flag_); }$/;"	f	class:User	typeref:typename:User::AuthFlags
getChannel	src/Server.cpp	/^const Channel &Server::getChannel(const std::string &ch_name) const {$/;"	f	class:Server	typeref:typename:const Channel &
getChannelOperators	src/Channel.cpp	/^const std::vector<int> &Channel::getChannelOperators() const {$/;"	f	class:Channel	typeref:typename:const std::vector<int> &
getChannelOperatorsNickName	src/Channel.cpp	/^const std::vector<std::string> Channel::getChannelOperatorsNickName() const {$/;"	f	class:Channel	typeref:typename:const std::vector<std::string>
getCreatedUser	src/Channel.cpp	/^const std::string &Channel::getCreatedUser() const {$/;"	f	class:Channel	typeref:typename:const std::string &
getFd	src/User.cpp	/^int User::getFd() const { return (this->fd_); }$/;"	f	class:User	typeref:typename:int
getJoinedChannelCount	src/User.cpp	/^size_t User::getJoinedChannelCount() const { return (this->ch_set_.size()); }$/;"	f	class:User	typeref:typename:size_t
getJoinedChannels	src/User.cpp	/^const std::set<std::string> &User::getJoinedChannels() const {$/;"	f	class:User	typeref:typename:const std::set<std::string> &
getJoinedUserCount	src/Channel.cpp	/^size_t Channel::getJoinedUserCount() const { return (this->ch_users_.size()); }$/;"	f	class:Channel	typeref:typename:size_t
getMapBeginIterator	src/Channel.cpp	/^std::map<int, User *>::const_iterator Channel::getMapBeginIterator() const {$/;"	f	class:Channel	typeref:typename:std::map<int,User * >::const_iterator
getMapEndIterator	src/Channel.cpp	/^std::map<int, User *>::const_iterator Channel::getMapEndIterator() const {$/;"	f	class:Channel	typeref:typename:std::map<int,User * >::const_iterator
getMode	src/Channel.cpp	/^enum Channel::ChannelMode Channel::getMode() const { return this->mode_; }$/;"	f	class:Channel	typeref:enum:Channel::ChannelMode
getMode	src/User.cpp	/^enum User::UserMode User::getMode() const { return this->mode_; }$/;"	f	class:User	typeref:enum:User::UserMode
getName	src/Channel.cpp	/^const std::string &Channel::getName() const { return (this->ch_name_); }$/;"	f	class:Channel	typeref:typename:const std::string &
getNickName	src/User.cpp	/^const std::string &User::getNickName() const { return this->nick_name_; }$/;"	f	class:User	typeref:typename:const std::string &
getPass	src/Channel.cpp	/^const std::string &Channel::getPass() const { return (this->ch_pass_); }$/;"	f	class:Channel	typeref:typename:const std::string &
getPass	src/Server.cpp	/^const std::string &Server::getPass() const { return (this->pass_); }$/;"	f	class:Server	typeref:typename:const std::string &
getRealName	src/User.cpp	/^const std::string &User::getRealName() const { return this->real_name_; }$/;"	f	class:User	typeref:typename:const std::string &
getUser	src/Server.cpp	/^const User &Server::getUser(const std::string &nickname) const {$/;"	f	class:Server	typeref:typename:const User &
getUserName	src/User.cpp	/^const std::string &User::getUserName() const { return this->user_name_; }$/;"	f	class:User	typeref:typename:const std::string &
handlPollEvents	src/Server.cpp	/^void Server::handlPollEvents() {$/;"	f	class:Server	typeref:typename:void
handleChannelMode	src/Command_MODE.cpp	/^void Command::handleChannelMode(User &user, std::vector<std::string> &arg,$/;"	f	class:Command	typeref:typename:void
handleChannelOperator	src/Command_MODE.cpp	/^void Command::handleChannelOperator(const ModeAction mode_action, User &user,$/;"	f	class:Command	typeref:typename:void
handleChannelOriginOperator	src/Command_MODE.cpp	/^void Command::handleChannelOriginOperator(const ModeAction mode_action,$/;"	f	class:Command	typeref:typename:void
handleChannelRequests	src/Command_JOIN.cpp	/^void Command::handleChannelRequests(std::queue<std::string> &ch_queue,$/;"	f	class:Command	typeref:typename:void
handleCommand	src/Command.cpp	/^void Command::handleCommand(User &user, std::string &message) {$/;"	f	class:Command	typeref:typename:void
hasChannelName	src/Server.cpp	/^bool Server::hasChannelName(const std::string &ch_name) const {$/;"	f	class:Server	typeref:typename:bool
hasMode	src/Channel.cpp	/^bool Channel::hasMode(const enum Channel::ChannelMode mode) const {$/;"	f	class:Channel	typeref:typename:bool
hasMode	src/User.cpp	/^bool User::hasMode(const enum User::UserMode mode) const {$/;"	f	class:User	typeref:typename:bool
i	include/Channel.hpp	/^		i = 1 << 5,$/;"	e	enum:Channel::ChannelMode
i	include/User.hpp	/^		i = 1 << 2,$/;"	e	enum:User::UserMode
init	src/Server.cpp	/^void Server::init() {$/;"	f	class:Server	typeref:typename:void
isChannelOperator	src/Channel.cpp	/^bool Channel::isChannelOperator(const int user_fd) const {$/;"	f	class:Channel	typeref:typename:bool
isChannelUser	src/Channel.cpp	/^bool Channel::isChannelUser(const int user_fd) const {$/;"	f	class:Channel	typeref:typename:bool
isMemberOfChannel	src/User.cpp	/^bool User::isMemberOfChannel(const std::string &ch_name) {$/;"	f	class:User	typeref:typename:bool
isSpecial	src/Command_NICK.cpp	/^bool isSpecial(const char &c) {$/;"	f	typeref:typename:bool
isUser	src/Server.cpp	/^bool Server::isUser(const std::string &nickname) const {$/;"	f	class:Server	typeref:typename:bool
isUsernameSet	src/User.cpp	/^bool User::isUsernameSet() const { return !this->user_name_.empty(); }$/;"	f	class:User	typeref:typename:bool
joinChannel	src/Command_JOIN.cpp	/^void Command::joinChannel(const std::string &ch_name, const std::string &ch_key,$/;"	f	class:Command	typeref:typename:void
joinStrFromVector	src/Command_MODE.cpp	/^void Command::joinStrFromVector(std::string &join_str, const Channel &ch,$/;"	f	class:Command	typeref:typename:void
k	include/Channel.hpp	/^		k = 1 << 13,$/;"	e	enum:Channel::ChannelMode
l	include/Channel.hpp	/^		l = 1 << 14,$/;"	e	enum:Channel::ChannelMode
m	include/Channel.hpp	/^		m = 1 << 6,$/;"	e	enum:Channel::ChannelMode
main	client.cpp	/^int main() {$/;"	f	typeref:typename:int
main	src/main.cpp	/^int main(const int argc, const char **argv) {$/;"	f	typeref:typename:int
mode_	include/Channel.hpp	/^	enum ChannelMode mode_;$/;"	m	class:Channel	typeref:enum:ChannelMode
mode_	include/User.hpp	/^	enum UserMode mode_;$/;"	m	class:User	typeref:enum:UserMode
mode_map_	include/Command.hpp	/^	std::map<char, ModeFunction> mode_map_;$/;"	m	class:Command	typeref:typename:std::map<char,ModeFunction>
n	include/Channel.hpp	/^		n = 1 << 7,$/;"	e	enum:Channel::ChannelMode
nc	Makefile	/^nc:$/;"	t
nick_name_	include/User.hpp	/^	std::string nick_name_;$/;"	m	class:User	typeref:typename:std::string
nicknameExist	src/Server.cpp	/^bool Server::nicknameExist(const std::string &nickname) const {$/;"	f	class:Server	typeref:typename:bool
nicknameInsertLog	src/Server.cpp	/^void Server::nicknameInsertLog(std::string nickname) {$/;"	f	class:Server	typeref:typename:void
nickname_log_	include/Command.hpp	/^	std::set<std::string> nickname_log_;$/;"	m	class:Command	typeref:typename:std::set<std::string>
nickname_log_	include/Server.hpp	/^	std::set<std::string> nickname_log_;$/;"	m	class:Server	typeref:typename:std::set<std::string>
none	include/Channel.hpp	/^		none = 0,$/;"	e	enum:Channel::ChannelMode
none	include/User.hpp	/^		none = 0,$/;"	e	enum:User::UserMode
o	include/Channel.hpp	/^		o = 1 << 2,$/;"	e	enum:Channel::ChannelMode
o	include/User.hpp	/^		o = 1 << 5,$/;"	e	enum:User::UserMode
p	include/Channel.hpp	/^		p = 1 << 9,$/;"	e	enum:Channel::ChannelMode
parseClientMessage	src/Command.cpp	/^void Command::parseClientMessage(const std::string &message) {$/;"	f	class:Command	typeref:typename:void
pass_	include/Server.hpp	/^	std::string pass_;$/;"	m	class:Server	typeref:typename:std::string
pollfd_vec_	include/Server.hpp	/^	std::vector<struct pollfd> pollfd_vec_;$/;"	m	class:Server	typeref:typename:std::vector<struct pollfd>
port_	include/Server.hpp	/^	int port_;$/;"	m	class:Server	typeref:typename:int
printChannelName	src/Server.cpp	/^void Server::printChannelName() const {$/;"	f	class:Server	typeref:typename:void
printChannelOperators	src/Channel.cpp	/^void Channel::printChannelOperators() const {$/;"	f	class:Channel	typeref:typename:void
printJoinChannel	src/User.cpp	/^void User::printJoinChannel() const {$/;"	f	class:User	typeref:typename:void
printJoinedUser	src/Channel.cpp	/^void Channel::printJoinedUser() const {$/;"	f	class:Channel	typeref:typename:void
q	include/Channel.hpp	/^		q = 1 << 8,$/;"	e	enum:Channel::ChannelMode
queryMode	include/Command.hpp	/^	enum ModeAction { setMode, unsetMode, queryMode };$/;"	e	enum:Command::ModeAction
r	include/Channel.hpp	/^		r = 1 << 12,$/;"	e	enum:Channel::ChannelMode
r	include/User.hpp	/^		r = 1 << 4,$/;"	e	enum:User::UserMode
re	Makefile	/^re: fclean all$/;"	t
real_name_	include/User.hpp	/^	std::string real_name_;$/;"	m	class:User	typeref:typename:std::string
recvCmdFromClient	src/Server.cpp	/^std::string Server::recvCmdFromClient(const size_t i) {$/;"	f	class:Server	typeref:typename:std::string
recv_message_	include/Command.hpp	/^	std::string recv_message_;$/;"	m	class:Command	typeref:typename:std::string
recv_msg_	include/Server.hpp	/^	std::string recv_msg_;$/;"	m	class:Server	typeref:typename:std::string
removeChannel	src/Server.cpp	/^void Server::removeChannel(const std::string &ch_name) {$/;"	f	class:Server	typeref:typename:void
removeChannel	src/User.cpp	/^void User::removeChannel(const std::string &ch_name) {$/;"	f	class:User	typeref:typename:void
removeChannelOperator	src/Channel.cpp	/^void Channel::removeChannelOperator(const int user_fd) {$/;"	f	class:Channel	typeref:typename:void
removeUser	src/Channel.cpp	/^void Channel::removeUser(const int fd) {$/;"	f	class:Channel	typeref:typename:void
run	Makefile	/^run: all client$/;"	t
run	src/Server.cpp	/^void Server::run() {$/;"	f	class:Server	typeref:typename:void
s	include/Channel.hpp	/^		s = 1 << 10,$/;"	e	enum:Channel::ChannelMode
s	include/User.hpp	/^		s = 1 << 7$/;"	e	enum:User::UserMode
sendMsgToClient	src/Server.cpp	/^void Server::sendMsgToClient(const int fd, const std::string &send_str) {$/;"	f	class:Server	typeref:typename:void
sendToChannelUser	src/Server.cpp	/^void Server::sendToChannelUser(std::string &ch_name, std::string &msg) const {$/;"	f	class:Server	typeref:typename:void
server_	include/Command.hpp	/^	Server &server_;$/;"	m	class:Command	typeref:typename:Server &
server_addr_	include/Server.hpp	/^	struct sockaddr_in server_addr_;$/;"	m	class:Server	typeref:struct:sockaddr_in
server_sockfd_	include/Server.hpp	/^	int server_sockfd_;$/;"	m	class:Server	typeref:typename:int
setArgToVec	src/Command_JOIN.cpp	/^bool Command::setArgToVec(const std::vector<std::string> &arg,$/;"	f	class:Command	typeref:typename:bool
setAuthFlags	src/User.cpp	/^void User::setAuthFlags(const AuthFlags &flags) { this->auth_flag_ = flags; }$/;"	f	class:User	typeref:typename:void
setChannel	src/Server.cpp	/^void Server::setChannel(const std::string &ch_name, const Channel &ch) {$/;"	f	class:Server	typeref:typename:void
setChannel	src/User.cpp	/^void User::setChannel(const Channel &ch) {$/;"	f	class:User	typeref:typename:void
setChannelOperator	src/Channel.cpp	/^void Channel::setChannelOperator(const int user_fd) {$/;"	f	class:Channel	typeref:typename:void
setMode	include/Command.hpp	/^	enum ModeAction { setMode, unsetMode, queryMode };$/;"	e	enum:Command::ModeAction
setMode	src/Channel.cpp	/^void Channel::setMode(const enum Channel::ChannelMode mode) {$/;"	f	class:Channel	typeref:typename:void
setMode	src/User.cpp	/^void User::setMode(const enum User::UserMode mode) {$/;"	f	class:User	typeref:typename:void
setNickname	src/User.cpp	/^void User::setNickname(const std::string &nickname) {$/;"	f	class:User	typeref:typename:void
setOrUnsetChannelOperator	src/Command_MODE.cpp	/^void Command::setOrUnsetChannelOperator(const size_t i,$/;"	f	class:Command	typeref:typename:void
setPortAndPass	src/Server.cpp	/^void Server::setPortAndPass(const char **argv) {$/;"	f	class:Server	typeref:typename:void
setRealName	src/User.cpp	/^void User::setRealName(const std::string &real_name) {$/;"	f	class:User	typeref:typename:void
setUser	src/Channel.cpp	/^void Channel::setUser(const User &user) {$/;"	f	class:Channel	typeref:typename:void
setUsername	src/User.cpp	/^void User::setUsername(const std::string &username) {$/;"	f	class:User	typeref:typename:void
startWithChannelChar	src/Command_JOIN.cpp	/^bool Command::startWithChannelChar(const std::string &str) {$/;"	f	class:Command	typeref:typename:bool
substrRealName	src/Command_USER.cpp	/^std::string Command::substrRealName(size_t i) const {$/;"	f	class:Command	typeref:typename:std::string
t	include/Channel.hpp	/^		t = 1 << 11,$/;"	e	enum:Channel::ChannelMode
unsetMode	include/Command.hpp	/^	enum ModeAction { setMode, unsetMode, queryMode };$/;"	e	enum:Command::ModeAction
up	Makefile	/^up:$/;"	t
user_map_	include/Server.hpp	/^	std::map<int, User> user_map_;$/;"	m	class:Server	typeref:typename:std::map<int,User>
user_name_	include/User.hpp	/^	std::string user_name_;$/;"	m	class:User	typeref:typename:std::string
v	include/Channel.hpp	/^		v = 1 << 3,$/;"	e	enum:Channel::ChannelMode
w	include/User.hpp	/^		w = 1 << 3,$/;"	e	enum:User::UserMode
~Server	src/Server.cpp	/^Server::~Server() {}$/;"	f	class:Server
サーバーが複数のクライアントからのの接続	doc.md	/^## サーバーが複数のクライアントからのの接続$/;"	s
ソケットfdについて	doc.md	/^## ソケットfdについて$/;"	s
ノンブロッキングIOについて	doc.md	/^## ノンブロッキングIOについて$/;"	s
